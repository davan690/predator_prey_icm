### --- would be easier to compute as fraction of equilibrium densities...
# Bundle the whole shabang into a single vector, which we then feed to the function
#params = c(phiJ_V,phiA_V,phiJ_P,phiA_P,gamma_V,gamma_P,b_P,b_V,beta,eta)
params = c(phiJ_V,phiA_V,phiJ_P,phiA_P,gamma_V,gamma_P,b_V,b_P,lambda)
# Initialize the state vector
N=matrix(NA,4,tmax)
N[,1] = runif(4,50,100) ### we state 4 values for 2 species and 2 stages
############################# Loop over time #################################################################
for (t in 1:(tmax-1)){
## Compute vital rates as a function of the initial state
vital_rate_matrix = as.matrix(vital_rates(params,N[,t]))
N[,t+1] = vital_rate_matrix %*% N[,t]
}
N[,tmax]
matplot(t(N[,1:tmax]))
matlines(t(N[,1:tmax]))
############################################ end of simulation ##################################################################
pdf(file="TimePlot_BGpredation_exponential_noSaturation.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(N[,20:tmax]),xlab="Time",ylab="Densities")
matlines(t(N[,20:tmax]),lwd=2)
dev.off()
pdf(file="TimePlot_BGpredation_exponential_log_noSaturation.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(log(N[,20:tmax])),xlab="Time",ylab="Densities")
matlines(t(log(N[,20:tmax])),lwd=2)
dev.off()
### Note: I can make a program to see where we are in parameter space with the density-independent model
# We want to have the largest eigenvalue close to 1 in terms of modulus
### or can't we look at it this way?
# Computes vital rates from the state vector N
max_modulusEigen_DImodel=function(params, factorCorrect = 1 ){
VR=matrix(NA,nrow=4,ncol=4)
# factorCorrect // May be used to lower the vital rates based on the fact that their are lower in the DD model
VR_prey = matrix(c((1-params[5])*params[1]*factorCorrect, params[7],
params[5]*params[1]*factorCorrect,  params[2]),nrow = 2, ncol = 2, byrow = TRUE)
VR_pred =  matrix(c((1-params[6])*params[3], params[8]*factorCorrect,
params[6]*params[3], params[4]),nrow = 2, ncol = 2, byrow = TRUE)
VR=bdiag(VR_prey,VR_pred)
max_eig = max(abs(eigen(VR)$values))
return(max_eig)
}
max_modulusEigen_DImodel(params)
max_modulusEigen_DImodel(params,factorCorrect = 0.5)
max_modulusEigen_DImodel(params,factorCorrect = 0.1)
## This parameter set seems to highlight interesting 4-point cycles for the prey
## coexisting with longer cycles for the predator, which is super interesting.
#####################################################################################################################################
### FBarraquand & OGimenez 14/11/2017 -- Two species density-dependent matrix model // predator -prey version
### 'New' version with density-dependence intra and inter affecting four vital rates, each vital rate affected once
### 18/03/2018 New set of parameters, slightly more realistic
### 07/09/2018 New version of pre-breeding model that we use statistically
### Second parameter set used in statistical paper
#####################################################################################################################################
library('Matrix')
####################### Definition of functions #####################################################
logistic=function(x){
return(1/(1+exp(-x)))
}
#logistic=function(x,x_thresh=1,steepness=1){
#return(1/(1+exp(-steepness*(x-x_thresh))))
#}
# Computes vital rates from the state vector N
vital_rates=function(params,N){
############ Parameters used as inputs #################################################################
### similar to statistical model
#########################################################################################################
VR=matrix(NA,nrow=4,ncol=4)
phiA = params[1:2] #
alphas = params[3:10] #
f=rep(NA,4)
### same order as in statistical model (not much logic)
f[1] = logistic(alpha[1] + alpha[2] *N[4]) # intra-species DD - juvenile predator survival fn of adult predator abundance
f[2] = logistic(alpha[3] + alpha[4] * N[4]) # inter-species DD - juvenile prey survival fn of adult predator abundance
f[3] = exp(alpha[5] + alpha[6] * N[1]) # inter-species DD - predator fecundity fn of juvenile prey abundance
f[4] = exp(alpha[7] + alpha[8] * N[2]) # intra-species DD - prey fecundity fn of adult prey abundance
VR_prey = matrix(c(0,0.5 * f[4]* f[2],
phiA[1],  phiA[1]),nrow = 2, ncol = 2,byrow = TRUE)
VR_pred =  matrix(c(0,0.5* f[3] * f[1],
phiA[2],phiA[2]),nrow = 2, ncol = 2,byrow = TRUE)
VR=bdiag(VR_prey,VR_pred)
return(VR)
}
############################################# end of functions def. ############################################################
################### Main program ###############################################################################################
### Initialization
#set.seed(42)
# Define parameters
tmax = 100 #max time for sim
### Max rate parameters
# Prey (max) adult survival (v for victim)
phiA_V = 0.6
# Predator adult survival
phiA_P = 0.7
# Other parameters
alpha <- rep(NA,8)
N <- seq(10,500,length=10)
# intra-species DD - juvenile predator survival fn of adult predator abundance
alpha[1] <- 0.5
alpha[2] <- -0.01 # slopes
1/(1+exp(-(alpha[1] + alpha[2] * N)))
# inter-species DD - juvenile prey survival fn of adult predator abundance
alpha[3] <- 0.5
alpha[4] <- -0.025 # slopes
1/(1+exp(-(alpha[3] + alpha[4] * N)))
# inter-species DD - predator fecundity fn of juvenile prey abundance
alpha[5] <- .5
alpha[6] <- 0.01 # slopes
exp(alpha[5] + alpha[6] * N)
# intra-species DD - prey fecundity fn of adult prey abundance
alpha[7] <- 1.5 #2.5 too much
alpha[8] <- -0.005 # slopes
exp(alpha[7] + alpha[8] * N)
# Bundle the whole shabang into a single vector, which we then feed to the function
params = c(phiA_V,phiA_P,alpha)
# Initialize the state vector
N=matrix(NA,4,tmax)
N[,1] = c(100,100,20,20)#runif(4,50,100) ### we state 4 values for 2 species and 2 stages
############################# Loop over time #################################################################
for (t in 1:(tmax-1)){
## Compute vital rates as a function of the initial state
vital_rate_matrix = as.matrix(vital_rates(params,N[,t]))
N[,t+1] = vital_rate_matrix %*% N[,t]
}
N[,tmax]
matplot(t(N[,1:tmax]))
matlines(t(N[,1:tmax]))
############################################ end of simulation ##################################################################
pdf(file="TimePlot_BGpredation_prebreed_newparam.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(N[,1:tmax]),xlab="Time",ylab="Densities")
matlines(t(N[,1:tmax]),lwd=2)
dev.off()
pdf(file="Log_TimePlot_BGpredation_prebreed_newparam.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(log(N[,1:tmax])),xlab="Time",ylab="Densities")
matlines(t(log(N[,1:tmax])),lwd=2)
dev.off()
getwd()
setwd("/home/frederic/Documents/Close_collabs/OlivierGimenez/ipm_twospecies/difference_equations/predator_prey/pre_breeding")
#####################################################################################################################################
### FBarraquand & OGimenez 14/11/2017 -- Two species density-dependent matrix model // predator -prey version
### 'New' version with density-dependence intra and inter affecting four vital rates, each vital rate affected once
### 18/03/2018 New set of parameters, slightly more realistic
### 07/09/2018 New version of pre-breeding model that we use statistically
### Second parameter set used in statistical paper
#####################################################################################################################################
library('Matrix')
####################### Definition of functions #####################################################
logistic=function(x){
return(1/(1+exp(-x)))
}
#logistic=function(x,x_thresh=1,steepness=1){
#return(1/(1+exp(-steepness*(x-x_thresh))))
#}
# Computes vital rates from the state vector N
vital_rates=function(params,N){
############ Parameters used as inputs #################################################################
### similar to statistical model
#########################################################################################################
VR=matrix(NA,nrow=4,ncol=4)
phiA = params[1:2] #
alphas = params[3:10] #
f=rep(NA,4)
### same order as in statistical model (not much logic)
f[1] = logistic(alpha[1] + alpha[2] *N[4]) # intra-species DD - juvenile predator survival fn of adult predator abundance
f[2] = logistic(alpha[3] + alpha[4] * N[4]) # inter-species DD - juvenile prey survival fn of adult predator abundance
f[3] = exp(alpha[5] + alpha[6] * N[1]) # inter-species DD - predator fecundity fn of juvenile prey abundance
f[4] = exp(alpha[7] + alpha[8] * N[2]) # intra-species DD - prey fecundity fn of adult prey abundance
VR_prey = matrix(c(0,0.5 * f[4]* f[2],
phiA[1],  phiA[1]),nrow = 2, ncol = 2,byrow = TRUE)
VR_pred =  matrix(c(0,0.5* f[3] * f[1],
phiA[2],phiA[2]),nrow = 2, ncol = 2,byrow = TRUE)
VR=bdiag(VR_prey,VR_pred)
return(VR)
}
############################################# end of functions def. ############################################################
################### Main program ###############################################################################################
### Initialization
#set.seed(42)
# Define parameters
tmax = 100 #max time for sim
### Max rate parameters
# Prey (max) adult survival (v for victim)
phiA_V = 0.6
# Predator adult survival
phiA_P = 0.7
# Other parameters
alpha <- rep(NA,8)
N <- seq(10,500,length=10)
# intra-species DD - juvenile predator survival fn of adult predator abundance
alpha[1] <- 0.5
alpha[2] <- -0.01 # slopes
1/(1+exp(-(alpha[1] + alpha[2] * N)))
# inter-species DD - juvenile prey survival fn of adult predator abundance
alpha[3] <- 0.5
alpha[4] <- -0.025 # slopes
1/(1+exp(-(alpha[3] + alpha[4] * N)))
# inter-species DD - predator fecundity fn of juvenile prey abundance
alpha[5] <- .5
alpha[6] <- 0.01 # slopes
exp(alpha[5] + alpha[6] * N)
# intra-species DD - prey fecundity fn of adult prey abundance
alpha[7] <- 1.5 #2.5 too much
alpha[8] <- -0.005 # slopes
exp(alpha[7] + alpha[8] * N)
# Bundle the whole shabang into a single vector, which we then feed to the function
params = c(phiA_V,phiA_P,alpha)
# Initialize the state vector
N=matrix(NA,4,tmax)
N[,1] = c(100,100,20,20)#runif(4,50,100) ### we state 4 values for 2 species and 2 stages
############################# Loop over time #################################################################
for (t in 1:(tmax-1)){
## Compute vital rates as a function of the initial state
vital_rate_matrix = as.matrix(vital_rates(params,N[,t]))
N[,t+1] = vital_rate_matrix %*% N[,t]
}
N[,tmax]
matplot(t(N[,1:tmax]))
matlines(t(N[,1:tmax]))
############################################ end of simulation ##################################################################
pdf(file="TimePlot_BGpredation_prebreed_newparam.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(N[,1:tmax]),xlab="Time",ylab="Densities")
matlines(t(N[,1:tmax]),lwd=2)
dev.off()
pdf(file="Log_TimePlot_BGpredation_prebreed_newparam.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(log(N[,1:tmax])),xlab="Time",ylab="Densities")
matlines(t(log(N[,1:tmax])),lwd=2)
dev.off()
#####################################################################################################################################
### FBarraquand & OGimenez 14/11/2017 -- Two species density-dependent matrix model // predator -prey version
### 'New' version with density-dependence intra and inter affecting four vital rates, each vital rate affected once
### 18/03/2018 New set of parameters, slightly more realistic
### 07/09/2018 New version of pre-breeding model that we use statistically
### 07/09/2018 Stochastic version of the model
#####################################################################################################################################
library('Matrix')
####################### Definition of functions #####################################################
logistic=function(x){
return(1/(1+exp(-x)))
}
#logistic=function(x,x_thresh=1,steepness=1){
#return(1/(1+exp(-steepness*(x-x_thresh))))
#}
# Computes vital rates from the state vector N
vital_rates=function(params,N){
############ Parameters used as inputs #################################################################
### similar to statistical model
#########################################################################################################
VR=matrix(NA,nrow=4,ncol=4)
phiA = params[1:2] #
alphas = params[3:10] #
f=rep(NA,4)
### same order as in statistical model (not much logic)
f[1] = logistic(alpha[1] + alpha[2] *N[4]) # intra-species DD - juvenile predator survival fn of adult predator abundance
f[2] = logistic(alpha[3] + alpha[4] * N[4]) # inter-species DD - juvenile prey survival fn of adult predator abundance
f[3] = exp(alpha[5] + alpha[6] * N[1]) # inter-species DD - predator fecundity fn of juvenile prey abundance
f[4] = exp(alpha[7] + alpha[8] * N[2]) # intra-species DD - prey fecundity fn of adult prey abundance
VR_prey = matrix(c(0,0.5 * f[4]* f[2],
phiA[1],  phiA[1]),nrow = 2, ncol = 2,byrow = TRUE)
VR_pred =  matrix(c(0,0.5* f[3] * f[1],
phiA[2],phiA[2]),nrow = 2, ncol = 2,byrow = TRUE)
VR=bdiag(VR_prey,VR_pred)
return(VR)
}
############################################# end of functions def. ############################################################
################### Main program ###############################################################################################
### Initialization
set.seed(40)
# Define parameters
tmax = 100#max time for sim
### Max rate parameters
# Prey (max) adult survival (v for victim)
phiA_V = 0.6
# Predator adult survival
phiA_P = 0.7
# Other parameters
alpha <- rep(NA,8)
N <- seq(10,500,length=10)
# intra-species DD - juvenile predator survival fn of adult predator abundance
alpha[1] <- 0.5
alpha[2] <- -0.01 # slopes
1/(1+exp(-(alpha[1] + alpha[2] * N)))
# inter-species DD - juvenile prey survival fn of adult predator abundance
alpha[3] <- 0.5
alpha[4] <- -0.025 # slopes
1/(1+exp(-(alpha[3] + alpha[4] * N)))
# inter-species DD - predator fecundity fn of juvenile prey abundance
alpha[5] <- .5
alpha[6] <- 0.01 # slopes
exp(alpha[5] + alpha[6] * N)
# intra-species DD - prey fecundity fn of adult prey abundance
alpha[7] <- 1.5 #2.5 too much
alpha[8] <- -0.005 # slopes
exp(alpha[7] + alpha[8] * N)
# Bundle the whole shabang into a single vector, which we then feed to the function
params = c(phiA_V,phiA_P,alpha)
# Initialize the state vector
N=matrix(NA,4,tmax)
N[,1] = c(100,100,20,20) #runif(4,50,100) ### we state 4 values for 2 species and 2 stages
############################# Loop over time #################################################################
for (t in 1:(tmax-1)){
## Compute vital rates as a function of the initial state
vital_rate_matrix = as.matrix(vital_rates(params,N[,t])) #vital_rate_matrix %*% N[,t]
N[1,t+1] = rpois(1,vital_rate_matrix[1,2] * N[2,t])
N[2,t+1] = rbinom(1,N[2,t]+N[1,t], vital_rate_matrix[2,2])
N[3,t+1] = rpois(1,vital_rate_matrix[3,4] * N[4,t])
N[4,t+1] = rbinom(1,N[3,t]+N[4,t], vital_rate_matrix[4,4])
}
N[,tmax]
matplot(t(N[,1:tmax]))
matlines(t(N[,1:tmax]))
############################################ end of simulation ##################################################################
pdf(file="TimePlot_BGpredation_prebreed_stochastic_newparam.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(N[,1:tmax]),xlab="Time",ylab="Densities")
matlines(t(N[,1:tmax]),lwd=2)
dev.off()
pdf(file="Log_TimePlot_BGpredation_prebreed_stochastic_newparam_log.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(log(N[,1:tmax])),xlab="Time",ylab="Densities")
matlines(t(log(N[,1:tmax])),lwd=2)
dev.off()
#####################################################################################################################################
### FBarraquand & OGimenez 14/11/2017 -- Two species density-dependent matrix model // predator -prey version
### 'New' version with density-dependence intra and inter affecting four vital rates, each vital rate affected once
### 18/03/2018 New set of parameters, slightly more realistic
### 07/09/2018 New version of pre-breeding model that we use statistically
### 07/09/2018 Stochastic version of the model
#####################################################################################################################################
library('Matrix')
####################### Definition of functions #####################################################
logistic=function(x){
return(1/(1+exp(-x)))
}
#logistic=function(x,x_thresh=1,steepness=1){
#return(1/(1+exp(-steepness*(x-x_thresh))))
#}
# Computes vital rates from the state vector N
vital_rates=function(params,N){
############ Parameters used as inputs #################################################################
### similar to statistical model
#########################################################################################################
VR=matrix(NA,nrow=4,ncol=4)
phiA = params[1:2] #
alphas = params[3:10] #
f=rep(NA,4)
### same order as in statistical model (not much logic)
f[1] = logistic(alpha[1] + alpha[2] *N[4]) # intra-species DD - juvenile predator survival fn of adult predator abundance
f[2] = logistic(alpha[3] + alpha[4] * N[4]) # inter-species DD - juvenile prey survival fn of adult predator abundance
f[3] = exp(alpha[5] + alpha[6] * N[1]) # inter-species DD - predator fecundity fn of juvenile prey abundance
f[4] = exp(alpha[7] + alpha[8] * N[2]) # intra-species DD - prey fecundity fn of adult prey abundance
VR_prey = matrix(c(0,0.5 * f[4]* f[2],
phiA[1],  phiA[1]),nrow = 2, ncol = 2,byrow = TRUE)
VR_pred =  matrix(c(0,0.5* f[3] * f[1],
phiA[2],phiA[2]),nrow = 2, ncol = 2,byrow=TRUE)
VR=bdiag(VR_prey,VR_pred)
return(VR)
}
############################################# end of functions def. ############################################################
################### Main program ###############################################################################################
### Initialization
set.seed(40)
# Define parameters
tmax = 100#max time for sim
### Max rate parameters
# Prey (max) adult survival (v for victim)
phiA_V = 0.6
# Predator adult survival
phiA_P = 0.7
# Other parameters
alpha <- rep(NA,8)
N <- seq(10,500,length=10)
# intra-species DD - juvenile predator survival fn of adult predator abundance
alpha[1] <- 0.5
alpha[2] <- -0.01 # slopes
1/(1+exp(-(alpha[1] + alpha[2] * N)))
# inter-species DD - juvenile prey survival fn of adult predator abundance
alpha[3] <- 0.5
alpha[4] <- -0.025 # slopes
1/(1+exp(-(alpha[3] + alpha[4] * N)))
# inter-species DD - predator fecundity fn of juvenile prey abundance
alpha[5] <- 0
alpha[6] <- 0.004 # slopes
exp(alpha[5] + alpha[6] * N)
# if juv prey gets above 500 we have a problem, otherwise OK
# intra-species DD - prey fecundity fn of adult prey abundance
alpha[7] <- 2 #1.5 #2.5 too much
alpha[8] <- -0.005 # slopes
exp(alpha[7] + alpha[8] * N)
# Bundle the whole shabang into a single vector, which we then feed to the function
params = c(phiA_V,phiA_P,alpha)
# Initialize the state vector
N=matrix(NA,4,tmax)
N[,1] = N[,1] = c(100,100,20,20) #runif(4,50,100) ### we state 4 values for 2 species and 2 stages
############################# Loop over time #################################################################
for (t in 1:(tmax-1)){
## Compute vital rates as a function of the initial state
vital_rate_matrix = as.matrix(vital_rates(params,N[,t])) #vital_rate_matrix %*% N[,t]
N[1,t+1] = rpois(1,vital_rate_matrix[1,2] * N[2,t])
N[2,t+1] = rbinom(1,N[2,t]+N[1,t], vital_rate_matrix[2,2])
N[3,t+1] = rpois(1,vital_rate_matrix[3,4] * N[4,t])
N[4,t+1] = rbinom(1,N[3,t]+N[4,t], vital_rate_matrix[4,4])
}
N[,tmax]
matplot(t(N[,1:tmax]))
matlines(t(N[,1:tmax]))
############################################ end of simulation ##################################################################
pdf(file="TimePlot_BGpredation_prebreed_stochastic.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(N[,1:tmax]),xlab="Time",ylab="Densities")
matlines(t(N[,1:tmax]),lwd=2)
dev.off()
pdf(file="Log_TimePlot_BGpredation_prebreed_stochastic_log.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(log(N[,1:tmax])),xlab="Time",ylab="Densities")
matlines(t(log(N[,1:tmax])),lwd=2)
dev.off()
#####################################################################################################################################
### FBarraquand & OGimenez 14/11/2017 -- Two species density-dependent matrix model // predator -prey version
### 'New' version with density-dependence intra and inter affecting four vital rates, each vital rate affected once
### 18/03/2018 New set of parameters, slightly more realistic
### 07/09/2018 New version of pre-breeding model that we use statistically
#####################################################################################################################################
library('Matrix')
####################### Definition of functions #####################################################
logistic=function(x){
return(1/(1+exp(-x)))
}
#logistic=function(x,x_thresh=1,steepness=1){
#return(1/(1+exp(-steepness*(x-x_thresh))))
#}
# Computes vital rates from the state vector N
vital_rates=function(params,N){
############ Parameters used as inputs #################################################################
### similar to statistical model
#########################################################################################################
VR=matrix(NA,nrow=4,ncol=4)
phiA = params[1:2] #
alphas = params[3:10] #
f=rep(NA,4)
### same order as in statistical model (not much logic)
f[1] = logistic(alpha[1] + alpha[2] *N[4]) # intra-species DD - juvenile predator survival fn of adult predator abundance
f[2] = logistic(alpha[3] + alpha[4] * N[4]) # inter-species DD - juvenile prey survival fn of adult predator abundance
f[3] = exp(alpha[5] + alpha[6] * N[1]) # inter-species DD - predator fecundity fn of juvenile prey abundance
f[4] = exp(alpha[7] + alpha[8] * N[2]) # intra-species DD - prey fecundity fn of adult prey abundance
VR_prey = matrix(c(0,0.5 * f[4]* f[2],
phiA[1],  phiA[1]),nrow = 2, ncol = 2,byrow = TRUE)
VR_pred =  matrix(c(0,0.5* f[3] * f[1],
phiA[2],phiA[2]),nrow = 2, ncol = 2,byrow = TRUE)
VR=bdiag(VR_prey,VR_pred)
return(VR)
}
############################################# end of functions def. ############################################################
################### Main program ###############################################################################################
### Initialization
set.seed(42)
# Define parameters
tmax = 100 #max time for sim
### Max rate parameters
# Prey (max) adult survival (v for victim)
phiA_V = 0.6
# Predator adult survival
phiA_P = 0.7
# Other parameters
alpha <- rep(NA,8)
N <- seq(10,500,length=10)
# intra-species DD - juvenile predator survival fn of adult predator abundance
alpha[1] <- 0.5
alpha[2] <- -0.01 # slopes
1/(1+exp(-(alpha[1] + alpha[2] * N)))
# inter-species DD - juvenile prey survival fn of adult predator abundance
alpha[3] <- 0.5
alpha[4] <- -0.025 # slopes
1/(1+exp(-(alpha[3] + alpha[4] * N)))
# inter-species DD - predator fecundity fn of juvenile prey abundance
alpha[5] <- 0
alpha[6] <- 0.004 # slopes
exp(alpha[5] + alpha[6] * N)
# if juv prey gets above 500 we have a problem, otherwise OK
# intra-species DD - prey fecundity fn of adult prey abundance
alpha[7] <- 2 #1.5 #2.5 too much
alpha[8] <- -0.005 # slopes
exp(alpha[7] + alpha[8] * N)
# Bundle the whole shabang into a single vector, which we then feed to the function
params = c(phiA_V,phiA_P,alpha)
# Initialize the state vector
N=matrix(NA,4,tmax)
N[,1] = N[,1] = c(100,100,20,20) #runif(4,50,100) ### we state 4 values for 2 species and 2 stages
############################# Loop over time #################################################################
for (t in 1:(tmax-1)){
## Compute vital rates as a function of the initial state
vital_rate_matrix = as.matrix(vital_rates(params,N[,t]))
N[,t+1] = vital_rate_matrix %*% N[,t]
}
N[,tmax]
matplot(t(N[,1:tmax]))
matlines(t(N[,1:tmax]))
############################################ end of simulation ##################################################################
pdf(file="TimePlot_BGpredation_prebreed.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(N[,1:tmax]),xlab="Time",ylab="Densities")
matlines(t(N[,1:tmax]),lwd=2)
dev.off()
pdf(file="Log_TimePlot_BGpredation_prebreed_log.pdf",width=12,height=8)
par(cex=1.2)
matplot(t(log(N[,1:tmax])),xlab="Time",ylab="Densities")
matlines(t(log(N[,1:tmax])),lwd=2)
dev.off()
q()
